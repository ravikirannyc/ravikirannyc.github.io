{"version":3,"sources":["webpack:///src/app/main/user-profile/default-store/default-store.component.ts","webpack:///src/app/main/user-profile/default-store/default-store.component.html","webpack:///src/app/main/user-profile/profile/profile.component.ts","webpack:///src/app/main/user-profile/profile/profile.component.html","webpack:///src/app/main/user-profile/user-profile-routing.module.ts","webpack:///src/app/main/user-profile/user-profile.component.ts","webpack:///src/app/main/user-profile/user-profile.component.html","webpack:///src/app/main/user-profile/user-profile.module.ts","webpack:///src/app/main/user-profile/wishlist/wishlist.component.ts","webpack:///src/app/main/user-profile/wishlist/wishlist.component.html","webpack:///src/app/shared/core/auth.guard.service.ts","webpack:///src/app/shared/dto/password.dto.ts","webpack:///src/app/shared/dto/store.dto.ts"],"names":["zipcodeChangeModalRef","DefaultStoreComponent","authenticationService","route","router","modalService","userProfileService","productService","storeDto","userInfo","retailers","selectedRetailers","selectedStores","maxStores","classNames","show","zipcodeChange","params","subscribe","loginStatus","res","sessionStorage","removeItem","navigate","getUserProfile","getRetailers","isLoadingUserInfo","getUserInfo","isLoadingRetailers","getRetailersList","event","retailer","srcElement","checked","push","retailerId","selected","index","findIndex","name","splice","noRetailerSelected","length","storesNotSelected","savePreferences","selector","templateUrl","styleUrls","ProfileComponent","zipcodeService","imageChangedEvent","userProfileFormGroup","userfirstNameFormControl","required","userlastNameFormControl","userzipcodeFormControl","pattern","minLength","maxLength","usercityFormControl","userstateFormControl","changePasswordFormGroup","userpasswordFormControl","userconfirmPasswordFormControl","getPassword","value","currentUserInfo","showLoading","isUploadingImage","updateUserProfile","isEditMode","profileUpdateAlert","setTimeout","error","profileUpdateErrorAlert","passwordDto","password","isChangingProfile","updateUserPassword","isPasswordChangeMode","passwordChangeAlert","passwordChangeErrorAlert","getConfirmPassword","isPasswordsMatch","uploadProfilePicture","e","file","target","files","imageType","type","match","profilePicUpdateErrorAlert","size","formData","FormData","append","selectedFile","nativeElement","profilePicture","get","invalid","isValidatingZipcode","getCityState","zipCode","locationInfoRes","city","state","isInValidZipcode","fileChangeEvent","routes","path","component","children","redirectTo","pathMatch","canActivate","UserProfileRoutingModule","forChild","imports","exports","UserProfileComponent","refreshSections","routeSection","redirectRoute","setActiveSection","UserProfileModule","withConfig","warnOnNgModelWithFormControl","declarations","WishlistComponent","products","noOfProductsToShow","totalSuccessProductsFound","sortItems","getPrdocutsByWishList","getProductsByWishList","AuthGuard","isUserLoggedIn","providedIn","PasswordDto","prop","hasOwnProperty","StoreDto"],"mappings":"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","file":"user-profile-user-profile-module-es5.js","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { AccordionConfig } from 'ngx-bootstrap/accordion';\r\nimport { AuthenticationService } from 'src/app/shared/core/authentication.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\r\nimport { StoreDto } from 'src/app/shared/dto/store.dto';\r\nimport { Store } from 'src/app/shared/models/store';\r\nimport { UserProfileService } from 'src/app/shared/core/user-profile.service';\r\nimport { UserInfo } from 'src/app/shared/models/user-info';\r\nimport { ProductService } from 'src/app/shared/core/product.service';\r\nimport { Retailer } from 'src/app/shared/models/retailer';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n \r\n\r\n@Component({\r\n  selector: 'app-default-store',\r\n  templateUrl: './default-store.component.html',\r\n  styleUrls: ['./default-store.component.sass']\r\n})\r\nexport class DefaultStoreComponent implements OnInit {\r\n\r\n  zipcodeChangeModalRef: BsModalRef;\r\n  storeDto = new StoreDto();\r\n  userInfo = new UserInfo();\r\n\r\n  store: Store;\r\n\r\n  retailers: Retailer[] = [];\r\n  selectedRetailers = [];\r\n  selectedStores = [];\r\n  maxStores: number = 5;\r\n  isLoadingRetailers: boolean;\r\n  isLoadingUserInfo: boolean;\r\n  noRetailerSelected: boolean;\r\n  storesNotSelected: boolean;\r\n\r\n  @ViewChild('zipcodeChange', {static:false}) zipcodeChange: any;\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService,\r\n    private route: ActivatedRoute,\r\n    private router: Router, \r\n    private modalService: BsModalService,\r\n    private userProfileService: UserProfileService,\r\n    private productService: ProductService,\r\n  ) { }\r\n\r\n  openzipcodeChangeModal(classNames) {\r\n    this.zipcodeChangeModalRef = this.modalService.show(this.zipcodeChange, {class: classNames});\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(() => {\r\n      this.authenticationService.loginStatus().subscribe(res => {\r\n        if(!res) {\r\n          sessionStorage.removeItem('iuli');\r\n          this.router.navigate(['/']);\r\n        }\r\n      });\r\n    });\r\n    this.getUserProfile();\r\n    this.getRetailers();\r\n  }\r\n\r\n  getUserProfile() {\r\n    this.isLoadingUserInfo = true;\r\n    this.userProfileService.getUserInfo().subscribe(userInfo => {\r\n      this.userInfo = new UserInfo(userInfo);\r\n      this.isLoadingUserInfo = false;\r\n    })\r\n  }\r\n\r\n  getRetailers() {\r\n    this.isLoadingRetailers = true;\r\n    this.productService.getRetailersList().subscribe(res => {\r\n      this.retailers = res;\r\n      this.isLoadingRetailers = false;\r\n    })\r\n  }\r\n\r\n  onRetailerChange(event, retailer: Retailer) {\r\n    if(event.srcElement.checked) {\r\n      this.selectedRetailers.push(retailer.retailerId);\r\n      retailer.selected = true;\r\n    } else {\r\n      let index = this.selectedRetailers.findIndex((name) => name == retailer.retailerId);\r\n      this.selectedRetailers.splice(index,1);\r\n      retailer.selected = false;\r\n    }\r\n    this.noRetailerSelected = false;\r\n  }\r\n\r\n  savePreferences() {\r\n    if(!this.isLoadingRetailers && !this.isLoadingUserInfo) {\r\n      if(this.selectedRetailers.length == 0) {\r\n        this.noRetailerSelected = true;\r\n        return\r\n      } else if(this.selectedRetailers.length != this.selectedStores.length) {\r\n        this.storesNotSelected = true;\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","<main class=\"defaultstore mt-3\">\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-12 col-md-12 col-lg-2 border-right\">\r\n            <form>\r\n                <div class=\"form-group\">\r\n                  <input type=\"text\" class=\"form-control\" id=\"zipcode\" placeholder=\"Loading...\" name=\"userzipcode\" [(ngModel)]=\"userInfo.zipCode\" disabled>\r\n                  <div class=\"invalid-feedback\">\r\n                    <span>Please provide a valid zipcode.</span>\r\n                    <span>Zipcode is required!.</span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"range\">Select Mile Radius</label>\r\n                    <p class=\"font-weight-normal text-primary mb-0\">{{userInfo.radius}} Miles</p>\r\n                    <input class=\"\" type=\"range\" min=\"10\" max=\"50\" step=\"1\" id=\"range\" name=\"radius\" [(ngModel)]=\"userInfo.radius\">\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <div class=\"col-sm-12 col-md-12 col-lg-10\">\r\n            <div class=\"row\">\r\n                <form class=\"col-sm-12\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-sm-12\">\r\n                            <!-- Success Message -->\r\n                            <!-- <div class=\"alert alert-success\" role=\"alert\">\r\n                                Zipcode successfully updated!\r\n                            </div> -->\r\n                            <!-- Error Message -->\r\n                            <div *ngIf=\"noRetailerSelected\" class=\"alert alert-warning\" role=\"alert\">\r\n                                Minimum 1 Retailer needs to be selected!\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-12\">\r\n                            <label for=\"\">Select Retailers <small>(Max 5)</small></label>\r\n                        </div>\r\n                        <div class=\"col-sm-6 col-md-4 col-lg-3 col-xl-2\" *ngIf=\"isLoadingRetailers\">\r\n                            <div class=\"retailer-box loading\"><div class=\"custom-control custom-checkbox\"></div></div>\r\n                        </div>\r\n                        <div class=\"col-sm-6 col-md-4 col-lg-3 col-xl-2\" *ngIf=\"isLoadingRetailers\">\r\n                            <div class=\"retailer-box loading\"><div class=\"custom-control custom-checkbox\"></div></div>\r\n                        </div>\r\n                        <div class=\"col-sm-6 col-md-4 col-lg-3 col-xl-2\" *ngIf=\"isLoadingRetailers\">\r\n                            <div class=\"retailer-box loading\"><div class=\"custom-control custom-checkbox\"></div></div>\r\n                        </div>\r\n                        <div *ngFor=\"let retailer of retailers\" class=\"col-sm-6 col-md-4 col-lg-3 col-xl-2\" [ngClass]=\"{'d-none' : !retailer.active || !retailer.stores}\">\r\n                            <!--For loader add class \"loading\" below-->\r\n                            <div class=\"retailer-box\">\r\n                                <div class=\"custom-control custom-checkbox\">\r\n                                    <input type=\"checkbox\" class=\"custom-control-input\" [id]=\"retailer.retailerId\" (click)=\"onRetailerChange($event, retailer);\" [checked]=\"retailer.selected\" name=\"selectedretailer\" [disabled]=\"selectedRetailers.length >= maxStores && !retailer.selected\">\r\n                                    <label class=\"custom-control-label\" [for]=\"retailer.retailerId\">\r\n                                        <img src=\"../../../assets/logos/{{retailer.retailerId}}.svg\" alt=\"\">\r\n                                    </label>\r\n                                </div>\r\n                            </div>  \r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <div class=\"col-sm-12\">\r\n                    <hr>\r\n                </div>\r\n                <form class=\"col-sm-12\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-sm-12\">\r\n                            <!-- Error Message -->\r\n                            <div *ngIf=\"storesNotSelected\" class=\"alert alert-warning\" role=\"alert\">\r\n                                Store must be selected for the selected retailers.\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-12\">\r\n                            <label for=\"\">Select Preferred Stores:</label>\r\n                        </div>\r\n                        <div *ngFor=\"let selectedRetailer of selectedRetailers\" class=\"col-sm-12 col-md-6 col-lg-6 mb-3\">\r\n                            <label class=\"retailerStoreLogo\" for=\"\">\r\n                                <img src=\"../../../assets/logos/{{selectedRetailer}}.svg\" alt=\"\">\r\n                            </label>\r\n                            <app-select-store [retailerType]=\"selectedRetailer\" [radius]=\"userInfo.radius\" [zipcode]=\"userInfo.zipCode\"></app-select-store>\r\n                        </div>\r\n                        <div class=\"col-sm-12 mt-3\">\r\n                            <button class=\"btn btn-sm btn-danger\" (click)=\"savePreferences()\" [disabled]=\"isLoadingRetailers || isLoadingUserInfo\">Save Preferences</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</main>\r\n\r\n<!-- Zipcode Change Confirmation Modal -->\r\n<!-- \"openzipcodeChangeModal('modal-md modal-dialog-centered')\" -->\r\n<ng-template #zipcodeChange>\r\n    <div class=\"modal-header bg-transparent border-bottom-0\">\r\n      <h6 class=\"modal-title text-secondary\">Update Default Zipcode</h6>\r\n      <button type=\"button\" class=\"close pull-right text-dark\" aria-label=\"Close\" (click)=\"zipcodeChangeModalRef.hide()\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-12 col-md-12\">\r\n            <h5 class=\"fw-normal\">This action will change the <u>default zip code</u>.</h5>\r\n            <p class=\"pb-2\">Do you want to continue?</p>\r\n            <button type=\"button\" class=\"btn btn-sm btn-outline-secondary mr-2\" (click)=\"zipcodeChangeModalRef.hide()\">No</button>\r\n            <button type=\"button\" class=\"btn btn-sm btn-danger\">Yes</button>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  </ng-template>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { AccordionConfig } from 'ngx-bootstrap/accordion';\r\nimport { AuthenticationService } from 'src/app/shared/core/authentication.service';\r\nimport { UserInfo } from 'src/app/shared/models/user-info';\r\nimport { UserProfileService } from 'src/app/shared/core/user-profile.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { error } from 'protractor';\r\nimport { PasswordDto } from 'src/app/shared/dto/password.dto';\r\nimport { ZipcodeService } from 'src/app/shared/core/zipcode.service';\r\n \r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.sass']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n\r\n  userInfo = new UserInfo();\r\n  isEditMode: boolean;\r\n  isPasswordChangeMode: boolean;\r\n  password: string;\r\n  showLoading: boolean;\r\n  isChangingProfile: boolean;\r\n  isPasswordsMatch;\r\n\r\n  passwordChangeAlert: boolean;\r\n  passwordChangeErrorAlert: boolean;\r\n\r\n  profileUpdateAlert: boolean;\r\n  profileUpdateErrorAlert: boolean;\r\n  profilePicUpdateErrorAlert: boolean;\r\n\r\n  @ViewChild('selectedFile', {static:false}) selectedFile: any;\r\n  imageChangedEvent: any = '';\r\n  isUploadingImage: boolean;\r\n\r\n  isValidatingZipcode: boolean;\r\n  isInValidZipcode: boolean;\r\n\r\n  constructor(\r\n    private authenticationService:AuthenticationService,\r\n    private userProfileService: UserProfileService,\r\n    private route: ActivatedRoute,\r\n    private router: Router, \r\n    private zipcodeService: ZipcodeService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(() => {\r\n      this.authenticationService.loginStatus().subscribe(res => {\r\n        if(!res) {\r\n          sessionStorage.removeItem('iuli');\r\n          this.router.navigate(['/']);\r\n        }\r\n      });\r\n    });\r\n    this.getUserInfo();\r\n\r\n    this.userProfileService.currentUserInfo.subscribe(userInfo => {\r\n      this.userInfo = userInfo;\r\n    });\r\n    \r\n  }\r\n\r\n  userProfileFormGroup = new FormGroup({\r\n    userfirstNameFormControl: new FormControl('',[\r\n      Validators.required\r\n    ]),\r\n    userlastNameFormControl: new FormControl('',[\r\n      Validators.required\r\n    ]),\r\n    userzipcodeFormControl: new FormControl('',[\r\n      Validators.required,\r\n      Validators.pattern(\"^[0-9]*$\"),\r\n      Validators.minLength(5),\r\n      Validators.maxLength(7)\r\n    ]),\r\n    usercityFormControl: new FormControl(''),\r\n    userstateFormControl: new FormControl(''),\r\n  });\r\n\r\n  changePasswordFormGroup = new FormGroup({\r\n    userpasswordFormControl: new FormControl('',[\r\n      Validators.required,\r\n      Validators.pattern(\"^(?=.*?[0-9]).{8,}$\") // Min 8 chars long, at least 1 number\r\n    ]),\r\n    userconfirmPasswordFormControl: new FormControl('',[\r\n      Validators.required,\r\n      Validators.pattern(this.getPassword?.value)\r\n    ])\r\n    \r\n  });\r\n\r\n  get getuserFirstName(){\r\n    return this.userProfileFormGroup.get('userfirstNameFormControl');\r\n  }\r\n\r\n  get getuserLastName(){\r\n    return this.userProfileFormGroup.get('userlastNameFormControl');\r\n  }\r\n\r\n  get getuserZipcode(){\r\n    return this.userProfileFormGroup.get('userzipcodeFormControl');\r\n  }\r\n\r\n  get getPassword(){\r\n    return this.changePasswordFormGroup?.get('userpasswordFormControl');\r\n  }\r\n\r\n  get getConfirmPassword(){\r\n    return this.changePasswordFormGroup?.get('userconfirmPasswordFormControl');\r\n  }\r\n\r\n  getUserInfo() {\r\n    this.showLoading = true;\r\n    this.isUploadingImage = true;\r\n    this.userProfileService.getUserInfo().subscribe(res => {\r\n      this.userInfo = res;\r\n      this.showLoading = false;\r\n      this.isUploadingImage = false;\r\n    });\r\n  }\r\n\r\n  saveChanges() {\r\n    this.showLoading = true;\r\n    this.userProfileService.updateUserProfile(this.userInfo).subscribe(res => {\r\n      //console.log(res);\r\n      this.isEditMode = false;\r\n      this.showLoading = false;\r\n\r\n      this.profileUpdateAlert = true;\r\n      setTimeout(() => this.profileUpdateAlert = false, 3000);\r\n    }, (error) => {\r\n      this.showLoading = false;\r\n      this.profileUpdateErrorAlert = true;\r\n      setTimeout(() => this.profileUpdateErrorAlert = false, 3000);\r\n    });\r\n  }\r\n\r\n  changePassword() {\r\n    \r\n    let passwordDto = new PasswordDto();\r\n    passwordDto.value = this.password;\r\n\r\n    this.isChangingProfile = true;\r\n    this.userProfileService.updateUserPassword(passwordDto).subscribe(res => {\r\n      this.isPasswordChangeMode = false;\r\n      this.isChangingProfile = false;\r\n\r\n      this.passwordChangeAlert = true\r\n      setTimeout(() => this.passwordChangeAlert = false, 3000);\r\n\r\n    },\r\n    (error) => {\r\n      // this.isPasswordChangeMode = false;\r\n      this.isChangingProfile = false;\r\n\r\n      this.passwordChangeErrorAlert = true\r\n      setTimeout(() => this.passwordChangeErrorAlert = false, 3000);\r\n    })\r\n  }\r\n\r\n  comparePasswords() {\r\n    if(this.getPassword.value === this.getConfirmPassword.value) {\r\n      this.isPasswordsMatch = true;\r\n    } else {\r\n      this.isPasswordsMatch = false;\r\n    }\r\n  }\r\n\r\n  fileChangeEvent(event: any): void {\r\n    this.imageChangedEvent = event;\r\n    this.uploadProfilePicture(event)\r\n  }\r\n\r\n  uploadProfilePicture(e) {\r\n    this.isUploadingImage = true;\r\n    var file = e.target.files[0];\r\n    var imageType = /image.*/;\r\n\r\n    if (!file.type.match(imageType)) {\r\n      this.profilePicUpdateErrorAlert = true;\r\n      this.isUploadingImage = false;\r\n      return\r\n    };\r\n\r\n    if(file.size > 1048576) {\r\n      this.profilePicUpdateErrorAlert = true;\r\n      this.isUploadingImage = false;\r\n      return\r\n    }\r\n\r\n    var formData = new FormData();\r\n    formData.append('image', file);\r\n\r\n    this.userProfileService.uploadProfilePicture(formData)\r\n      .subscribe(res => {\r\n        this.isUploadingImage = false;\r\n        this.profilePicUpdateErrorAlert = false;\r\n        this.selectedFile.nativeElement.value = '';\r\n        this.userInfo.profilePicture = res;\r\n        this.imageChangedEvent = '';\r\n      }, (error) => {\r\n        this.profilePicUpdateErrorAlert = true;\r\n        this.isUploadingImage = false;\r\n      })\r\n\r\n}\r\n\r\nvalidateZipcode() {\r\n  if(!this.userProfileFormGroup.get('userzipcodeFormControl').invalid) {\r\n    this.isValidatingZipcode = true;\r\n    this.zipcodeService.getCityState(this.userInfo.zipCode).subscribe(locationInfoRes => {\r\n      this.userInfo.city = locationInfoRes.city;\r\n      this.userInfo.state = locationInfoRes.state;\r\n      this.isValidatingZipcode = false;\r\n      this.isInValidZipcode = false;\r\n    }, (error) => {\r\n      this.isValidatingZipcode = false;\r\n      this.isInValidZipcode = true;\r\n    })\r\n  }\r\n}\r\n\r\n  // uploadProfilePicture(event) {\r\n  //   if(event) {\r\n  //     //Convert Blob to File\r\n  //     var file = new File([event], this.imageChangedEvent.srcElement.files[0].name, {type: this.imageChangedEvent.srcElement.files[0].type, lastModified: Date.now()});\r\n  //     let formData: FormData = new FormData();\r\n  //     formData.append('image',file);\r\n  //     this.userProfileService.uploadProfilePicture(formData)\r\n  //     .subscribe(res => {\r\n\r\n  //       //Emits the profile picture after upload to display in the admin component\r\n  //       // this.sharedService.profilePic.emit(this.userProfile.user.profilePicture);\r\n\r\n  //       //Clears file upload input\r\n  //       this.selectedFile.nativeElement.value = '';\r\n  //       event.remove();\r\n\r\n  //       this.imageChangedEvent = '';\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n}\r\n","<main class=\"profile\">\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-12\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-12 col-md-12 col-lg-10\">\r\n                  <div class=\"media align-items-center mt-4\">\r\n                    <!-- Add class 'loading' to show loading of image -->\r\n                    <div class=\"userImage mr-2\" [ngClass]=\"{'loading' : isUploadingImage}\" >\r\n                      <ngx-avatar \r\n                        *ngIf=\"!userInfo.profilePicture\"\r\n                        [style.display]=\"'inline-block'\"\r\n                        class=\"\" \r\n                        name=\"{{userInfo.firstName + ' ' + userInfo.lastName}}\"\r\n                        size=\"100\">\r\n                      </ngx-avatar>\r\n                      <ngx-avatar \r\n                        *ngIf=\"userInfo.profilePicture\" \r\n                        [style.display]=\"'inline-block'\"\r\n                        class=\"\"\r\n                        src=\"data:image/JPEG;base64,{{userInfo.profilePicture}}\"\r\n                        size=\"100\">\r\n                      </ngx-avatar>\r\n                      <!--\r\n                        Profile Image Uploader\r\n                        For Non Edit add class d-none to imageUploader\r\n                      -->\r\n                      <span class=\"imageUploader\" [ngClass]=\"{'d-none':isUploadingImage}\">\r\n                        <div class=\"custom-file\">\r\n                          <input type=\"file\" #selectedFile (change)=\"fileChangeEvent($event)\" class=\"custom-file-input\" id=\"customFile\">\r\n                          <label class=\"\" for=\"customFile\"><i class=\"fas fa-camera\"></i></label>\r\n                        </div>\r\n                      </span>\r\n                      <!-- Profile Image Uploader -->\r\n                    </div>\r\n                    \r\n                    <div class=\"media-body\" >\r\n                      <h5 class=\"mt-0\" >{{userInfo.firstName}} {{userInfo.lastName}}</h5>\r\n                      {{userInfo.email}}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-sm-12\">\r\n                  <!-- For User profile update error scenario -->\r\n                  <div *ngIf=\"profilePicUpdateErrorAlert\" class=\"alert alert-warning mt-2\" role=\"alert\" >\r\n                    Please select an image less than 1 MB and in JPG/PNG format.\r\n                  </div>\r\n                </div>\r\n            </div>\r\n            <hr class=\"mb-0 mt-2\">\r\n        </div>\r\n        <div class=\"col-sm-12\">\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-12 col-md-12 mt-2\">\r\n              <!-- For User profile update error scenario -->\r\n              <div *ngIf=\"profileUpdateErrorAlert\" class=\"alert alert-warning\" role=\"alert\" >\r\n                We are unable to process your request now. Please try again after sometime.\r\n              </div>\r\n              <!-- For success scenario -->\r\n              <div *ngIf=\"profileUpdateAlert\" class=\"alert alert-success\" role=\"alert\" >\r\n                Profile updated successfully!\r\n              </div>\r\n            </div>\r\n            <div class=\"col-sm-12 col-md-12 col-lg-8\">\r\n              <form action=\"\" class=\"mt-4\" [formGroup]=\"userProfileFormGroup\">\r\n                \r\n                <div class=\"form-row\">\r\n                  <div class=\"form-group col-sm-12 col-md-6\" >\r\n                    <label for=\"firstName\" >First Name</label>\r\n                    <h6 *ngIf=\"!isEditMode\" >{{userInfo.firstName}}</h6>\r\n                    <input \r\n                      *ngIf=\"isEditMode\"\r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      id=\"firstName\"\r\n                      name=\"firstName\"\r\n                      formControlName=\"userfirstNameFormControl\"\r\n                      [(ngModel)]=\"userInfo.firstName\"\r\n                      [class.is-invalid] = \"userProfileFormGroup.get('userfirstNameFormControl').invalid && userProfileFormGroup.get('userfirstNameFormControl').touched\">\r\n                      <div class=\"invalid-feedback\">\r\n                        <span *ngIf=\"getuserFirstName.errors?.required\">First name is required</span>\r\n                      </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-row\">\r\n                  <div class=\"form-group col-sm-12 col-md-6\" >\r\n                    <label for=\"lastName\" >Last Name</label>\r\n                    <h6 *ngIf=\"!isEditMode\" >{{userInfo.lastName}}</h6>\r\n                    <input \r\n                      *ngIf=\"isEditMode\"\r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      id=\"lastName\"\r\n                      name=\"lastName\"\r\n                      formControlName=\"userlastNameFormControl\"\r\n                      [(ngModel)]=\"userInfo.lastName\"\r\n                      [class.is-invalid] = \"userProfileFormGroup.get('userlastNameFormControl').invalid && userProfileFormGroup.get('userlastNameFormControl').touched\">\r\n                      <div class=\"invalid-feedback\">\r\n                        <span *ngIf=\"getuserLastName.errors?.required\">Last name is required</span>\r\n                      </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-row\">\r\n                  <div class=\"form-group col-sm-12 col-md-4 col-lg-4\" >\r\n                    <label for=\"inputCity\" >City</label>\r\n                    <h6 *ngIf=\"!isEditMode\" >{{userInfo.city}}</h6>\r\n                    <input \r\n                        *ngIf=\"isEditMode\"\r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        id=\"usercity\"\r\n                        name=\"usercity\"\r\n                        formControlName=\"usercityFormControl\"\r\n                        [(ngModel)]=\"userInfo.city\">\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-row\">\r\n                  <div class=\"form-group col-sm-12 col-md-4 col-lg-4\" >\r\n                    <label for=\"inputState\" >State</label>\r\n                    <h6 *ngIf=\"!isEditMode\" >{{userInfo.state}}</h6>\r\n                    <input \r\n                      *ngIf=\"isEditMode\"\r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      id=\"userstate\"\r\n                      name=\"userstate\"\r\n                      formControlName=\"userstateFormControl\"\r\n                      [(ngModel)]=\"userInfo.state\">\r\n                  </div>\r\n                  </div>\r\n                  <div class=\"form-row\">\r\n                    <div class=\"form-group col-sm-12 text-left\" >\r\n                        <!-- Edit Profile Button -->\r\n                   <!--      <button *ngIf=\"!isEditMode\" class=\"btn btn-sm btn-secondary\" (click)=\"isEditMode = true\">Edit Profile</button> -->\r\n                        <!-- <a *ngIf=\"!isEditMode\" href=\"javascript:void\" (click)=\"isEditMode = true\" style=\"font-family: cursive;color:lightcoral\">Edit User Profile</a> -->\r\n                        <button *ngIf=\"!isEditMode\" type=\"button\" class=\"btn btn-sm btn-outline-danger mr-2\" (click)=\"isEditMode = true\" >\r\n                          <span class=\"glyphicon glyphicon-pencil\"></span> Edit\r\n                        </button>\r\n                        <!-- Button -->\r\n                        <button *ngIf=\"isEditMode\"  type=\"submit\" class=\"btn btn-sm btn-outline-danger mr-2\" (click)=\"isEditMode = false; getUserInfo();\">Cancel</button>\r\n                        <button \r\n                          *ngIf=\"isEditMode\" \r\n                          type=\"submit\" \r\n                          class=\"btn btn-sm btn-danger\" \r\n                          (click)=\"saveChanges()\"\r\n                          [disabled]=\"userProfileFormGroup.get('userfirstNameFormControl').invalid || \r\n                            userProfileFormGroup.get('userlastNameFormControl').invalid || \r\n                            showLoading\">\r\n                          Save\r\n                          <!-- Button Loader -->\r\n                          <span class=\"spinner-border spinner-border-sm ml-1 d-none\" role=\"status\" aria-hidden=\"true\"></span>\r\n                        </button>\r\n                    </div>\r\n                  </div>\r\n              </form>\r\n            </div>\r\n            <div class=\"col-sm-12 col-md-12 col-lg-4\">\r\n              <form action=\"\" class=\"mt-4 \" [formGroup]=\"changePasswordFormGroup\">\r\n              <div class=\"form-row\">\r\n                  <!-- Password Fields Display Button -->\r\n                  <div *ngIf=\"!isPasswordChangeMode\" class=\"form-group col-sm-12 text-left\" >\r\n                    <button type=\"button\" class=\"btn btn-sm btn-outline-danger mr-2\" (click)=\"isPasswordChangeMode = true\">\r\n                       Change Password\r\n                    </button>\r\n                  </div>\r\n                  <div *ngIf=\"isPasswordChangeMode\" class=\"form-group col-sm-12\" >\r\n                    <label for=\"password\">New Password</label>\r\n                    <input \r\n                      type=\"password\" \r\n                      class=\"form-control\" \r\n                      id=\"newPassword\"\r\n                      name=\"newPassword\"\r\n                      formControlName=\"userpasswordFormControl\"\r\n                      [(ngModel)]=\"password\"\r\n                      (keyup)=\"comparePasswords()\"\r\n                      [class.is-invalid] = \"changePasswordFormGroup.get('userpasswordFormControl').invalid && changePasswordFormGroup.get('userpasswordFormControl').touched\">\r\n                    <!-- Error Message -->  \r\n                    <div class=\"invalid-feedback\">\r\n                      <span *ngIf=\"getPassword.errors?.required\">Password is required</span>\r\n                      <span *ngIf=\"getPassword.errors?.pattern\">Password must be minimum 8 characters long & contain at least 1 number</span>\r\n                    </div>\r\n                    <!-- Till here -->\r\n                  </div>\r\n                  <div *ngIf=\"isPasswordChangeMode\" class=\"form-group col-sm-12\" > \r\n                    <label for=\"confirmPassword\">Confirm Password</label>\r\n                    <input \r\n                      type=\"password\" \r\n                      class=\"form-control\" \r\n                      id=\"confirmPassword\"\r\n                      name=\"confirmPassword\"\r\n                      formControlName=\"userconfirmPasswordFormControl\"\r\n                      (keyup)=\"comparePasswords()\"\r\n                      [class.is-invalid] = \"(changePasswordFormGroup.get('userconfirmPasswordFormControl').invalid && changePasswordFormGroup.get('userconfirmPasswordFormControl').touched) || (!isPasswordsMatch && changePasswordFormGroup.get('userconfirmPasswordFormControl').touched)\">\r\n                    <div class=\"invalid-feedback\">\r\n                      <span *ngIf=\"getConfirmPassword.errors?.required\">Password is required</span>\r\n                      <span *ngIf=\"!getConfirmPassword.errors?.required && !isPasswordsMatch\">Passwords didn't match.</span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group col-sm-12\">\r\n                    <button *ngIf=\"isPasswordChangeMode\" type=\"submit\" class=\"btn btn-sm btn-outline-danger mr-2\" (click)=\"isPasswordChangeMode = false\">Cancel</button>\r\n                    <button \r\n                      *ngIf=\"isPasswordChangeMode\" \r\n                      type=\"submit\" \r\n                      class=\"btn btn-sm btn-danger\" \r\n                      (click)=\"changePassword()\"\r\n                      [disabled]=\"changePasswordFormGroup.get('userpasswordFormControl').invalid || \r\n                        changePasswordFormGroup.get('userconfirmPasswordFormControl').invalid || \r\n                        !isPasswordsMatch || \r\n                        isChangingProfile\">\r\n                      Change Password\r\n                      <!-- Button Loader -->\r\n                      <span *ngIf=\"isChangingProfile\" class=\"spinner-border spinner-border-sm ml-1\" role=\"status\" aria-hidden=\"true\"></span>\r\n                    </button>\r\n                    <div *ngIf=\"passwordChangeAlert\" class=\"alert alert-success\" role=\"alert\">\r\n                      Password changed successfully!\r\n                    </div>\r\n                    <div *ngIf=\"passwordChangeErrorAlert\" class=\"alert alert-danger mt-2\" role=\"alert\">\r\n                      Oops! Something went wrong. Please try again.\r\n                    </div>\r\n                  </div>\r\n              </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <!-- For Loading on whole form -->\r\n          <div *ngIf=\"showLoading\" class=\"profile-loader\">\r\n            <div class=\"spinner-border spinner-border-sm text-primary\" role=\"status\">\r\n              <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n</main>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { WishlistComponent } from './wishlist/wishlist.component';\r\nimport { DefaultStoreComponent } from './default-store/default-store.component';\r\nimport { UserProfileComponent } from './user-profile.component';\r\nimport { AuthGuard } from 'src/app/shared/core/auth.guard.service';\r\n\r\nconst routes: Routes = [\r\n\r\n  { path: '', \r\n    component : UserProfileComponent,\r\n    children: [\r\n      { path: '', redirectTo: 'profile', pathMatch: 'full' },\r\n      { path: 'profile', canActivate: [AuthGuard], component: ProfileComponent },\r\n      { path: 'wishlist', canActivate: [AuthGuard], component: WishlistComponent }\r\n      //{ path: 'defaultstore', canActivate: [AuthGuard], component: DefaultStoreComponent },\r\n    ] \r\n  },\r\n\r\n  \r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserProfileRoutingModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { SectionedComponent } from 'src/app/shared/section/sectioned-components';\r\nimport { userProfileSections } from 'src/app/shared/section/section';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  templateUrl: './user-profile.component.html',\r\n  styleUrls: ['./user-profile.component.sass']\r\n})\r\nexport class UserProfileComponent extends SectionedComponent implements OnInit {\r\n  \r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) { \r\n    super();\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    // this is called when the param changes means when user click on the tabs\r\n    // from list of lcs it will call the api to get the LC by id.\r\n    // it detect the change by route.params which is default Observable provided by angular\r\n    this.route.params.subscribe(() => {\r\n      this.refreshSections(userProfileSections);\r\n    });\r\n  }\r\n\r\n  openSection(routeSection: string, index: number): void {\r\n    let redirectRoute: string = \"/user/\" + routeSection;\r\n    this.setActiveSection(index);\r\n    this.router.navigate([redirectRoute]);\r\n  }\r\n\r\n}\r\n","<!-- <app-header [isHome]=\"false\"></app-header> -->\r\n\r\n<section class=\"w-100 py-4 accountSection\">\r\n    <div class=\"container\">\r\n        <div class=\"row\">\r\n            \r\n            <div class=\"col-sm-12 col-md-12 col-lg-10 py-3 px-4\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <h6 class=\"\" *ngFor=\"let section of sections; let tabIndex = index\">\r\n                            <!-- {{section.active ? section.title : ''}} -->\r\n                        </h6>\r\n                    </div>\r\n\r\n                    <div class=\"col-12\">\r\n                        <fieldset>\r\n                            <router-outlet></router-outlet>\r\n                        </fieldset>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>\r\n\r\n<!-- <app-footer></app-footer> -->","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { FormsModule, ReactiveFormsModule }   from '@angular/forms';\r\nimport { UserProfileRoutingModule }   from './user-profile-routing.module';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { WishlistComponent } from './wishlist/wishlist.component';\r\nimport { DefaultStoreComponent } from './default-store/default-store.component';\r\nimport { UserProfileComponent } from './user-profile.component';\r\nimport { AvatarModule } from 'ngx-avatar';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UserProfileComponent,\r\n    ProfileComponent,\r\n    WishlistComponent,\r\n    DefaultStoreComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'}),\r\n    SharedModule,\r\n    UserProfileRoutingModule,\r\n    AvatarModule,\r\n    NgSelectModule,\r\n  ],\r\n  \r\n})\r\nexport class UserProfileModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthenticationService } from 'src/app/shared/core/authentication.service';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\nimport { ProductService } from 'src/app/shared/core/product.service';\r\nimport { Product } from 'src/app/shared/models/product';\r\nimport { Category, CategoryItems } from 'src/app/shared/enums/category.enum';\r\nimport { SortItems } from 'src/app/shared/ng-select/items';\r\n\r\n@Component({\r\n  selector: 'app-wishlist',\r\n  templateUrl: './wishlist.component.html',\r\n  styleUrls: ['./wishlist.component.sass'],\r\n})\r\nexport class WishlistComponent implements OnInit {\r\n\r\n  constructor(private router: Router,\r\n    private route: ActivatedRoute,\r\n    private productService: ProductService,private authenticationService: AuthenticationService,\r\n    ) { \r\n      this.sortItems = SortItems;\r\n      //this.categoryItems = CategoryItems;\r\n     }\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(() => {\r\n        this.getPrdocutsByWishList();\r\n    });\r\n\r\n    this.route.params.subscribe(() => {\r\n      this.authenticationService.loginStatus().subscribe(res => {\r\n        if(!res) {\r\n          sessionStorage.removeItem('iuli');\r\n          this.router.navigate(['/']);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  category: String;\r\n  products: Product[] = [];\r\n\r\n  noOfProductsToShow = 16;\r\n  categorySelect;\r\n  sortItems;\r\n  categoryItems;\r\n  selectedSortItem;\r\n  totalSuccessProductsFound = 0;\r\n  showLoading: boolean;\r\n  \r\n\r\n  getPrdocutsByWishList() {\r\n    this.products = [];\r\n    this.showLoading = true;\r\n    this.productService.getProductsByWishList().subscribe(res => {\r\n      if(!res) {\r\n        this.products = [];\r\n      }else{\r\n      this.products = res;\r\n      this.showLoading = false;\r\n      this.totalSuccessProductsFound = this.products.length;\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","<main class=\"wishlist\">\r\n\r\n<section *ngIf=\"products\" class=\"browse py-1\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n    <div class=\"col-sm-12 col-md-8 mb-1\" style=\"margin-bottom: 5px;margin-top: 20px;\">\r\n      <!-- <h5 class=\"font-weight-normal mb-0\">Showing Products For: <b><span id=\"searchedTerm\">{{searchKey}}</span></b></h5> -->\r\n      \r\n      \r\n      <!-- <progressbar [value]=\"50\" type=\"primary\" [striped]=\"false\"></progressbar>\r\n      <p class=\"lead mt-2 mb-0\">Found <span class=\"text-primary\"><b>5 products in 5 retailers.</b></span></p> -->\r\n      \r\n      \r\n      <label class=\"text-left\">\r\n        Found {{totalSuccessProductsFound}} products in your Wishlist.\r\n       </label> \r\n<!-- \r\n       <a [routerLink]=\"['/product/search/category']\" \r\n      [queryParams]=\"{category:'Ethnic Wear',outfitType:'All',brandName:'All',color: 'All',\r\n      priceRange: 'All', neckType: 'All',fittingType: 'All', sleeveLength: 'All',patternType: 'All',\r\n      borderStyle: 'All',retailerType: 'All', ornamentation: 'All',pr: 'l2h'}\" queryParamsHandling=\"merge\"  \r\n      style=\"font-size: large;color: #b80a24;margin-left: 50px;\">Ethnic Wear</a> \r\n      \r\n      <a [routerLink]=\"['/product/search/category']\" [queryParams]=\"{category:'Western Wear',outfitType:'All',\r\n      brandName:'All',color: 'All',priceRange: 'All', neckType: 'All',fittingType: 'All', sleeveLength: 'All',\r\n      patternType: 'All',borderStyle: 'All',retailerType: 'All', ornamentation: 'All',pr: 'l2h'}\" \r\n      queryParamsHandling=\"merge\" style=\"font-size: large;margin-left: 50px;color: #b80a24;\">Western Wear</a> -->\r\n    </div>\r\n   \r\n    </div>\r\n          <div class=\"row\">\r\n            <div style=\"margin-top: 10px;\" class=\"col-sm-4 col-md-4 col-lg-4 col-xl-4 mb-4\" *ngFor=\"let product of products | slice:0:noOfProductsToShow let i=index\">\r\n              <app-product-card-w [product]=\"product\" [page]=\"'wishlist'\" [setWishListFlag]=\"true\" ></app-product-card-w>\r\n            </div>\r\n          </div> \r\n            <div class=\"col-sm-12\">\r\n              <div class=\"text-center mt-4 loadmore\">\r\n                <button *ngIf=\"noOfProductsToShow < products.length\" class=\"btn btn-md btn-secondary showMoreButton\" (click)=\"noOfProductsToShow = noOfProductsToShow + noOfProductsToShow\">Load More</button>\r\n            </div>\r\n            <div *ngIf=\"showLoading\" class=\"profile-loader\">\r\n              <div class=\"spinner-border spinner-border-sm text-primary\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n              </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n     <!-- For Loading on whole form -->\r\n     \r\n    \r\n</section>\r\n</main>","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthenticationService } from '../../shared/core/authentication.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor( \r\n    private router: Router, \r\n    private authenticationService : AuthenticationService,\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n   \r\n    if(this.authenticationService.isUserLoggedIn()) {\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['/']);\r\n      return false;\r\n    }\r\n   \r\n  }\r\n}","export class PasswordDto {\r\n\r\n    constructor(passwordDto?: PasswordDto) {\r\n\r\n        if (passwordDto) {\r\n            for (let prop in passwordDto) {\r\n                if (passwordDto.hasOwnProperty(prop)) {\r\n                    this[prop] = passwordDto[prop];\r\n                }\r\n            }\r\n            \r\n            \r\n        } else {\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    type: string = \"password\";\r\n\r\n    value: string;\r\n\r\n}","export class StoreDto {\r\n\r\n    constructor(storeDto?: StoreDto) {\r\n\r\n        if (storeDto) {\r\n            for (let prop in storeDto) {\r\n                if (storeDto.hasOwnProperty(prop)) {\r\n                    this[prop] = storeDto[prop];\r\n                }\r\n            }\r\n            \r\n            \r\n        } else {\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    retailer: string;\r\n\r\n    zipcode: string;\r\n\r\n    radius: number;\r\n\r\n}"]}